视图

视图是从一个表或多个表导出的表，视图是一个虚表。数据库中存储视图
对应的基本表的数据，不存储视图的数据，只把视图的定义存入数据字典。
操作视图的数据是，实际上操作的是视图对应的基本表的数据。基本表的
数据的改变也会自动反应在视图中。

创建视图
CREATE VIEW IS_Student AS SELECT SNO,SNAME,SAGE FROM STUDENT
WHERE SDEPT = 'IS' WITH CHECK OPTION;
WITH CHECK OPTION 表示对视图进行UPDATE,INSERT,DELETE时要保证
更新，插入，删除的行满足试图定义中的谓词条件（即子查询中的条件表达式）

删除视图
DROOP VIEW IS_Student CASCADE ;视同CASCADE能够级联删除视图。

视图的作用
1.能简化用户的操作 。定义了多表连接的视图，将表之间的连接操作对
用户隐蔽了。
2.机制可以使用户以不同的方式查询同一数据
3.对数据库重构提供了一定程度的逻辑独立性
4.可以对机密的数据提供安全保护，对不同用户定义不同的视图，限制用
户可以看到的数据，保护机密数据。

对于可更新的视图，在视图中的行和基表中的行之间必须具有一对一的关系。
如果视图包含下述结构中的任何一种，那么它就是不可更新的：
1.聚合函数（SUM(), MIN(), MAX(), COUNT()等）。
2.去重 DISTINCT
3.分组 GROUP BY
4.分组查询 HAVING
5.联接 UNION或UNION ALL
6.位于选择列表中的子查询
7.Join
8.FROM子句中的不可更新视图
9.WHERE子句中的子查询，引用FROM子句中的表。

测试表:user有id，name，age，sex字段
测试表:goods有id，name，price字段
测试表:ug有id，userid，goodsid字段
视图的作用实在是太强大了，以下是我体验过的好处：
作用一：
    提高了重用性，就像一个函数。
    如果要频繁获取user的name和goods的name。就应该使用以下sql语言。
    示例：
        select a.name as username, b.name as goodsname from 
        user as a, goods as b, ug as c where a.id=c.userid 
        nd c.goodsid=b.id;
    但有了视图就不一样了，创建视图other。示例
        create view other as select a.name as username, b.name 
        as goodsname from user as a, goods as b, ug as c 
        where a.id=c.userid and c.goodsid=b.id;
    创建好视图后，就可以这样获取user的name和goods的name。示例：
        select * from other;
    以上sql语句，就能获取user的name和goods的name了。
作用二：
    对数据库重构，却不影响程序的运行。假如因为某种需求，需要将user
    拆分表usera和表userb，该两张表的结构如下：
        测试表:usera有id，name，age字段
        测试表:userb有id，name，sex字段
   这时如果php端使用sql语句：select * from user;那就会提示该表不存在。
    解决方案：创建视图。以下sql语句创建视图：
        create view user as select a.name,a.age,b.sex from usera 
        as a, userb as b where a.name=b.name;
        以上假设name都是唯一的。
        此时php端使用sql语句：select * from user;就不会报错什么的。
        这就实现了更改数据库结构，不更改脚本程序的功能了。
作用三：
    提高了安全性能。
    以对不同的用户，设定不同的视图。
    例如：某用户只能获取user表的name和age数据，不能获取sex数据。
    则可以这样创建视图。示例如下：
        create view other as select a.name, a.age from user as a;
    这样的话，使用sql语句：select * from other; 
    最多就只能获取name和age的数据，其他的数据就获取不了了。
作用四：
    让数据更加清晰。想要什么样的数据，就创建什么样的视图。
    经过以上三条作用的解析，这条作用应该很容易理解了吧
